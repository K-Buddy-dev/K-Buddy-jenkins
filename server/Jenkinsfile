pipeline {
    agent any

    environment {
        OCI_IMAGE = 'yny.ocir.io/axrlv6zrch9a/kbuddy-server:latest'
        EC2_HOST = '43.201.18.4'
        CONTAINER_NAME = 'kbuddy-server'
        OCI_USER = 'axrlv6zrch9a/dpfprtus@gmail.com'
        OCI_REPO = 'yny.ocir.io'
    }

    stages {
        stage('Deploy to EC2') {
            steps {
                withCredentials([
                    string(credentialsId: 'OCI_AUTH_TOKEN', variable: 'OCI_TOKEN')
                ]) {
                    script {
                        // Publish Over SSH를 사용한 SSH 연결 및 명령 실행
                        sshPublisher(
                            failOnError: true,
                            publishers: [
                            sshPublisherDesc(
                                configName:'EC2 Server',
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: '', // 특별한 파일 전송이 없을 경우 비워두기
                                        remoteDirectory: '/home/ubuntu', // 원격 디렉터리 (필요시 사용)
                                        execCommand: """ 
                                            set -e
                                            docker login ${OCI_REPO} -u ${OCI_USER} -p "${OCI_TOKEN}" 
                                            docker pull ${OCI_IMAGE}

                                            if [ \$(docker ps -q -f name=${CONTAINER_NAME}) ]; then
                                                docker stop ${CONTAINER_NAME} && docker rm ${CONTAINER_NAME}
                                            fi

                                            docker run -d --name ${CONTAINER_NAME} -p 8080:8080 ${OCI_IMAGE}
                                        """  // EC2에서 실행할 명령어
                                    )
                                ]
                            )
                        ])
                    }
                }
            }
        }
    }

    post {
        always {
            withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                script {
                    def message = """
                    제목 : ${currentBuild.displayName}
                    결과 : ${currentBuild.result}
                    실행 시간 : ${currentBuild.duration / 1000}s
                    """
                    discordSend description: message,
                                link: env.BUILD_URL, result: currentBuild.currentResult, 
                                title: "${env.JOB_NAME} : ${currentBuild.displayName} ${currentBuild.result}",
                                webhookURL: "$DISCORD"
                }
            }
        }
    }
}
